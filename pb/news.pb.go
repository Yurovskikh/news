// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/news.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/news.proto

It has these top-level messages:
	GetNewsByIdRequest
	GetNewsByIdResponse
	CreateNewsRequest
	CreateNewsResponse
	News
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetNewsByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetNewsByIdRequest) Reset()                    { *m = GetNewsByIdRequest{} }
func (m *GetNewsByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNewsByIdRequest) ProtoMessage()               {}
func (*GetNewsByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetNewsByIdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetNewsByIdResponse struct {
	News   *News  `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
	Sucess bool   `protobuf:"varint,2,opt,name=sucess" json:"sucess,omitempty"`
	Err    string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *GetNewsByIdResponse) Reset()                    { *m = GetNewsByIdResponse{} }
func (m *GetNewsByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNewsByIdResponse) ProtoMessage()               {}
func (*GetNewsByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetNewsByIdResponse) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

func (m *GetNewsByIdResponse) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

func (m *GetNewsByIdResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CreateNewsRequest struct {
	News *News `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
}

func (m *CreateNewsRequest) Reset()                    { *m = CreateNewsRequest{} }
func (m *CreateNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNewsRequest) ProtoMessage()               {}
func (*CreateNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateNewsRequest) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

type CreateNewsResponse struct {
	News   *News  `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
	Sucess bool   `protobuf:"varint,2,opt,name=sucess" json:"sucess,omitempty"`
	Err    string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
}

func (m *CreateNewsResponse) Reset()                    { *m = CreateNewsResponse{} }
func (m *CreateNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNewsResponse) ProtoMessage()               {}
func (*CreateNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateNewsResponse) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

func (m *CreateNewsResponse) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

func (m *CreateNewsResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type News struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Header string `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Date   int64  `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *News) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *News) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *News) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func init() {
	proto.RegisterType((*GetNewsByIdRequest)(nil), "pb.GetNewsByIdRequest")
	proto.RegisterType((*GetNewsByIdResponse)(nil), "pb.GetNewsByIdResponse")
	proto.RegisterType((*CreateNewsRequest)(nil), "pb.CreateNewsRequest")
	proto.RegisterType((*CreateNewsResponse)(nil), "pb.CreateNewsResponse")
	proto.RegisterType((*News)(nil), "pb.News")
}

func init() { proto.RegisterFile("pb/news.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x90, 0xb1, 0x4b, 0xc6, 0x30,
	0x10, 0xc5, 0x49, 0x1a, 0x4a, 0x7b, 0xa2, 0xe8, 0x09, 0xd2, 0xc1, 0xa1, 0x04, 0x87, 0x4e, 0x15,
	0xf5, 0x3f, 0xa8, 0x83, 0xb8, 0x38, 0x64, 0xd6, 0xa1, 0x31, 0x07, 0x76, 0x69, 0x63, 0x2e, 0xa5,
	0xf8, 0xdf, 0x4b, 0x42, 0x07, 0xfd, 0x86, 0x6f, 0xfa, 0xb6, 0x7b, 0xc7, 0x7b, 0x3f, 0x1e, 0x0f,
	0xce, 0xbd, 0xbd, 0x9f, 0x69, 0xe3, 0xde, 0x87, 0x25, 0x2e, 0x28, 0xbd, 0xd5, 0x77, 0x80, 0x2f,
	0x14, 0xdf, 0x68, 0xe3, 0xe1, 0xe7, 0xd5, 0x19, 0xfa, 0x5e, 0x89, 0x23, 0x5e, 0x80, 0x9c, 0x5c,
	0x23, 0x5a, 0xd1, 0x29, 0x23, 0x27, 0xa7, 0x3f, 0xe0, 0xfa, 0x9f, 0x8b, 0xfd, 0x32, 0x33, 0xe1,
	0x2d, 0xa8, 0x84, 0xcb, 0xc6, 0xb3, 0xc7, 0xaa, 0xf7, 0xb6, 0x4f, 0x1e, 0x93, 0xbf, 0x78, 0x03,
	0x25, 0xaf, 0x9f, 0xc4, 0xdc, 0xc8, 0x56, 0x74, 0x95, 0xd9, 0x15, 0x5e, 0x42, 0x41, 0x21, 0x34,
	0x45, 0x2b, 0xba, 0xda, 0xa4, 0x53, 0x3f, 0xc0, 0xd5, 0x73, 0xa0, 0x31, 0x52, 0x4e, 0xef, 0x1d,
	0x8e, 0xc2, 0xf5, 0x3b, 0xe0, 0xdf, 0xc8, 0x89, 0x0b, 0x0d, 0xa0, 0x52, 0xee, 0x70, 0x87, 0x44,
	0xf8, 0xa2, 0xd1, 0x51, 0xc8, 0x84, 0xda, 0xec, 0x0a, 0x11, 0x94, 0x1b, 0x23, 0x65, 0x44, 0x61,
	0xf2, 0x6d, 0xcb, 0x3c, 0xf2, 0xd3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x8c, 0xd0, 0x4f,
	0x75, 0x01, 0x00, 0x00,
}
